#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
var url = require('url');
var https = require('https');
var fs = require('fs');
var path = require('path');
var io;
global.roomDataOnGame = [];
global.shapeArr = [];
global.newRoomData = {};
global.rate = null;
global.exchangeUid = null;
global.gradeConfigData = [];
import {onConnect,getRoomData} from "../routes/socketCtrl";
// var httpsOpt = {
//   key : fs.readFileSync(path.join(path.dirname(__dirname),'public/httpsCert/214099849550308.key')),
//   cert : fs.readFileSync(path.join(path.dirname(__dirname),'public/httpsCert/214099849550308.pem'))
// };
/**
 * Get port from environment and store in Express.
 */

// var port = normalizePort(process.env.PORT || '3000');
// app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
//var server = https.createServer(httpsOpt,app);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen('666','192.168.1.238', ()=>{
    const host = server.address().address;
    const port = server.address().port;
    console.log("应用实例，访问地址为 http://%s:%s", host, port || 666);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}



/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


var opts = {
    'origins': '*:*',
    'path': '/socket.io',
    'transports': ['polling', 'websocket']
};


getRoomData().then((data)=>{
    global.roomNumData = data[0];
    global.roomData = data[1];
    global.shapeArr = data[2];
    global.rate = parseFloat(data[3]);
    global.exchangeUid = data[4];
    global.gradeConfigData = data[5];
    console.log('global.rate:', global.rate);
    console.log('global.exchangeUid:', global.exchangeUid);
    io = require('socket.io').listen(server, opts);
    global.io = io;
    if ( typeof io.emit === "function" ) {
        console.log('   info  - socket.io started');
    }

    io.use(function(socket, next) {
        var handshakeData = socket.request;
        var domain = '';
        var origin = handshakeData.headers.origin || handshakeData.headers.referer;
        var parts = url.parse(''+origin);
        var re = new RegExp(domain+"$","g");
        var arr = re.exec(parts.hostname);
        if ( domain === '' ) {
            next();
        } else if ( arr !== null ) {
            next();
        } else {
            var dt = new Date();
            console.log(dateToString(dt)+' '+parts.hostname+' handshake unauthorized');
        }
    });
    io.on('connection',  onConnect);
});